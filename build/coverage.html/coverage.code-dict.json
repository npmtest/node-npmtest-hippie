{"/home/travis/build/npmtest/node-npmtest-hippie/test.js":"/* istanbul instrument in package npmtest_hippie */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hippie/lib.npmtest_hippie.js":"/* istanbul instrument in package npmtest_hippie */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hippie = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hippie = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hippie/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hippie && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hippie */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hippie\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hippie.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_hippie.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hippie.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_hippie.__dirname +\n                    '/lib.npmtest_hippie.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hippie/node_modules/hippie/lib/hippie.js":"/**\n * Primary export.\n */\n\nmodule.exports = require('./hippie/client');\n\n/**\n * Export assert.\n */\n\nmodule.exports.assert = require('./hippie/assert');\n\n/**\n * User configurable property, influences whether or not\n * the `showDiff` flag should be included in the thrown\n * AssertionErrors.\n */\n\nmodule.exports.assert.showDiff = false;\n","/home/travis/build/npmtest/node-npmtest-hippie/node_modules/hippie/lib/hippie/client.js":"/**\n * External dependencies.\n */\n\nvar request = require('request');\nvar https = require('https');\nvar http = require('http');\n\n/**\n * Internal dependencies.\n */\n\nvar serializers = require('./serializers');\nvar parsers = require('./parsers');\nvar expect = require('./expect');\nvar Promise = global.Promise || require('es6-promise').Promise;\n\n/**\n * Client.\n *\n * @param {Object|Function} HTTP app or HTTP handler\n * @constructor\n */\n\nfunction Client(app) {\n  if (!(this instanceof Client)) return new Client(app);\n  this._base = '';\n  this._url = '';\n  this.serialize = serializers.raw;\n  this.parse = parsers.raw;\n  this.middlewares = [];\n  this.expectations = [];\n  this.options = {\n    followRedirect: false,\n    method: 'GET',\n    headers: {}\n  };\n\n  if (app) this.app(app);\n}\n\n/**\n * Set request timeout.\n *\n * @param {Number} time\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.timeout = function(time) {\n  this.options.timeout = time;\n  return this;\n};\n\n/**\n * Turn on request response time.\n *\n * @param {Boolean} time\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.time = function(time) {\n  this.options.time = time;\n  return this;\n};\n\n/**\n * Set an object containing the query string values.\n *\n * @param {Object} obj\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.qs = function(obj) {\n  this.options.qs = obj;\n  return this;\n};\n\n/**\n * Set base URL.\n *\n * @param {String} url\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.base = function(url) {\n  this._base = url;\n  return this;\n};\n\n/**\n * Set URL.\n *\n * @param {String} url\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.url = function(url) {\n  this._url = url;\n  return this;\n};\n\n/**\n * Set a header.\n *\n * @param {String} key\n * @param {String} value\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.header = function(key, val) {\n  this.options.headers[key] = val;\n  return this;\n};\n\n/**\n * Set HTTP method.\n *\n * @param {String} method\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.method = function(method) {\n  this.options.method = method;\n  return this;\n};\n\n/**\n * Yield the options for `request`.\n *\n * @param {Function} callback\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.opts = function(fn) {\n  fn(this.options);\n  return this;\n};\n\n/**\n * Set Content-Type and Accept headers to\n * application/json. Also changes the configured\n * serializer and parser.\n *\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.json = function() {\n  this.header('Content-Type', 'application/json; charset=utf-8');\n  this.header('Accept', 'application/json');\n  this.serializer(serializers.json);\n  this.parser(parsers.json);\n  return this;\n};\n\n/**\n * Set the Content-Type to x-www-form-urlencoded and\n * set the correct serializer.\n *\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.form = function() {\n  this.header('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');\n  this.serializer(serializers.urlencoded);\n  return this;\n};\n\n/**\n * Set request body serializer.\n *\n * @param {Function} serializer\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.serializer = function(serializer) {\n  this.serialize = serializer;\n  return this;\n};\n\n/**\n * Set response body parser.\n *\n * @param {Function} parser\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.parser = function(parser) {\n  this.parse = parser;\n  return this;\n};\n\n/**\n * Send given `data`.\n *\n * @param {Object} data\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.send = function(data) {\n  this.data = data;\n  return this;\n};\n\n/**\n * Set basic auth credentials.\n *\n * @param {String} user\n * @param {String} password\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.auth = function(user, pass) {\n  this.options.auth = { user: user, pass: pass };\n  return this;\n};\n\n/**\n * Register a middleware.\n *\n * @param {Function} fn\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.use = function(fn) {\n  this.middlewares.push(fn);\n  return this;\n};\n\n/**\n * Register an expectation.\n *\n * @param {Function} fn\n * @api public\n */\n\nClient.prototype.expect = function(fn) {\n  this.expectations.push(fn);\n  return this;\n};\n\n/**\n * Status code expectation.\n *\n * @param {Number} status code\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.expectStatusCode =\nClient.prototype.expectStatus =\nClient.prototype.expectCode = function(code) {\n  this.expect(expect.statusCode(code));\n  return this;\n};\n\n/**\n * Set a header expectation.\n *\n * @param {String} key\n * @param {String} val\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.expectHeader = function(key, val) {\n  this.expect(expect.header(key, val));\n  return this;\n};\n\n/**\n * Set a value expectation.\n *\n * @param {String} string path\n * @param {Mixed} value\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.expectValue = function(key, val) {\n  this.expect(expect.value(key, val));\n  return this;\n};\n\n/**\n * Set a key expectation.\n *\n * @param {String} string path\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.expectKey = function(key) {\n  this.expect(expect.keyCheck(key));\n  return this;\n};\n\n/**\n * Set a body expectation.\n *\n * @param {Mixed} expectation\n * @returns {Client} self\n * @api pbulic\n */\n\nClient.prototype.expectBody = function(expected) {\n  this.expect(expect.body(expected));\n  return this;\n};\n\n/**\n * Sugar syntax for `method`, `url` and `end`.\n *\n * @see Client#method\n * @see Client#url\n * @see Client#end\n */\n\n[\n  'GET',\n  'POST',\n  'DELETE',\n  'PUT',\n  'HEAD',\n  'PATCH'\n].forEach(function(method) {\n  var key = method === 'DELETE' ? 'del' : method.toLowerCase();\n\n  Client.prototype[key] = function(url, fn) {\n    this.method(method);\n    this.url(url);\n    if (fn) this.end(fn);\n    return this;\n  };\n});\n\n\n/**\n * Prepares options, serializes request body, and calls setup() for middlware\n * @param {Function} end\n * @api private\n */\nClient.prototype.prepare = function(end) {\n  var self = this;\n\n  this.options.url = self._base + self._url;\n\n  if (!this.data) {\n    this.options.headers['Content-Type'];\n    return this.setup(this.options, end);\n  }\n\n  this.serialize(this.data, function(err, body) {\n    if (err) return end(err);\n    self.options.body = body;\n    self.setup(self.options, end);\n  });\n};\n\n/**\n * Perform the test.\n *\n * @param {Function} fn\n * @api public\n */\n\nClient.prototype.end = function(end) {\n  if (end) return this.prepare(end);\n\n  var self = this;\n  return new Promise(function(resolve, reject) {\n    self.prepare(function(err, res, body) {\n      if (err) return reject(err);\n      resolve(res);\n    });\n  });\n};\n\n/**\n * Specify app to be used. If `app` is a function it will create\n * a new HTTP server, if object it will assume that it's a koa, connect, express app.\n * After figuring this out, it will set the base url to point to what the app\n * has returned.\n *\n * @param {Object|Function} app\n * @returns {Client} self\n * @api public\n */\n\nClient.prototype.app = function(app) {\n  var address = null;\n  var protocol = null;\n  var port = null;\n  var server = null;\n\n  if (typeof app === 'function') app = http.createServer(app);\n  if (app.address) address = app.address();\n  if (!address) server = app.listen(0);\n\n  port = app.address ? app.address().port : server.address().port;\n  protocol = app instanceof https.Server ? 'https' : 'http';\n\n  this.base(protocol + '://127.0.0.1:' + port);\n\n  return this;\n};\n\n/**\n * Perform the HTTP request, parse the response\n * and run the expectations.\n *\n * @param {Object} options\n * @param {Function} end\n * @api private\n */\n\nClient.prototype.request = function(options, end) {\n  var self = this;\n  request(options, function(err, res) {\n    if (err) return end(err, res);\n    self.parse(res.body, function(err, body) {\n      if (err) return end(err, res, body);\n      self.verify(err, res, body, end);\n    });\n  });\n};\n\n/**\n * Call all registered middlewares with `options`.\n *\n * @param {Object} options\n * @param {Function} end\n * @api private\n */\n\nClient.prototype.setup = function(options, end) {\n  var self = this;\n  var middlewares = this.middlewares.slice(0);\n  (function next(options, fn) {\n    var mid = middlewares.shift();\n    if (!mid) return self.request(options, end);\n    mid(options, next);\n  })(options);\n};\n\n/**\n * Verify the expectations.\n *\n * @param {Object} error\n * @param {Object} response\n * @param {Mixed} body\n * @param {Function} end\n * @api private\n */\n\nClient.prototype.verify = function(err, res, body, end) {\n  var expectations = this.expectations.slice(0);\n\n  (function verify(err) {\n    var expect = expectations.shift();\n    if (!expect || err) return end(err, res, body);\n    expect(res, body, verify);\n  })();\n};\n\n/**\n * Primary export.\n */\n\nmodule.exports = Client;\n","/home/travis/build/npmtest/node-npmtest-hippie/node_modules/hippie/lib/hippie/serializers.js":"/**\n * External dependencies.\n */\n\nvar qs = require('qs');\n\n/**\n * Convert object to qs.\n *\n * @param {Object} data\n * @param {Function} fn\n * @api public\n */\n\nexports.urlencoded = function(data, fn) {\n  fn(null, qs.stringify(data).toString('utf8'));\n};\n\n/**\n * Convert object to JSON.\n *\n * @param {Object} data\n * @param {Function} fn\n * @api public\n */\n\nexports.json = function(data, fn) {\n  fn(null, JSON.stringify(data));\n};\n\n/**\n * Noop serializer.\n *\n * @param {String} data\n * @param {Function} fn\n * @api public\n */\n\nexports.raw = function(data, fn) {\n  fn(null, data);\n};\n","/home/travis/build/npmtest/node-npmtest-hippie/node_modules/hippie/lib/hippie/parsers.js":"/**\n * Parse JSON.\n *\n * @param {Object} data - if empty(eg: HTTP 204, HTTP 304) then not parsed\n * @param {Function} fn\n * @api public\n */\n\nexports.json = function(data, fn) {\n  var res = null;\n  var err = null;\n\n  if (data) {\n    try {\n      res = JSON.parse(data);\n    } catch (e) {\n      err = e;\n    }\n  }\n\n  fn(err, res);\n};\n\n/**\n * Noop parser.\n *\n * @param {String} data\n * @param {Function} fn\n * @api public\n */\n\nexports.raw = function(data, fn) {\n  fn(null, data);\n};\n","/home/travis/build/npmtest/node-npmtest-hippie/node_modules/hippie/lib/hippie/expect.js":"/**\n * External dependencies.\n */\n\nvar pathval = require('pathval');\n\n/**\n * Internal dependencies.\n */\n\nvar assert = require('./assert');\n\n/**\n * Return a status code expectation.\n *\n * @param {Number} expected status code\n * @returns {Function}\n * @api public\n */\n\nexports.statusCode = function(code) {\n  return function statusCode(res, body, next) {\n    next(assert(res.statusCode, code, 'Status code'));\n  };\n};\n\n/**\n * Return a header expectation.\n *\n * @param {String} header\n * @param {String} value\n * @returns {Function}\n * @api public\n */\n\nexports.header = function(key, val) {\n  key = key.toLowerCase();\n  return function header(res, body, next) {\n    next(assert(res.headers[key], val, 'Header - ' + key));\n  };\n};\n\n/**\n * Return a value expectation.\n *\n * @param {String} string path\n * @param {Mixed} value\n * @returns {Function}\n * @api public\n */\n\nexports.value = function(key, val) {\n  return function value(res, body, next) {\n    next(assert(pathval(key, body), val, 'Value - ' + key));\n  };\n};\n\n/**\n * Return a key expectation.\n *\n * @param {String} string path\n * @returns {Function}\n * @api public\n */\n\nexports.keyCheck = function(keyParam) {\n  return function keyCheck(res, body, next) {\n    var value = pathval(keyParam, body);\n    var notUndefined = typeof value !== 'undefined';\n    next(assert(notUndefined, true, 'Key - ' + keyParam));\n  };\n};\n\n/**\n * Return a body expectation.\n *\n * @param {Mixed} expected\n * @returns {Function}\n * @api public\n */\n\nexports.body = function(expected) {\n  return function value(res, body, next) {\n    var actual = res.body;\n\n    if (Array.isArray(expected)) {\n      actual = body;\n    } else if (Object(expected) === expected && !isRegexp(expected)) {\n      actual = body;\n    }\n\n    next(assert(actual, expected, 'Body'));\n  };\n};\n\nfunction isRegexp(input) {\n  return toString.call(input) === '[object RegExp]';\n}\n","/home/travis/build/npmtest/node-npmtest-hippie/node_modules/hippie/lib/hippie/assert.js":"/**\n * Core dependencies.\n */\n\nvar inspect = require('util').inspect;\n\n/**\n * External dependencies.\n */\n\nvar AssertionError = require('assertion-error');\nvar eql = require('deep-eql');\n\n/**\n * Check if `actual` === `expected` and if not\n * return a new `AssertionError`.\n *\n * @param {Mixed} actual\n * @param {Mixed} expected\n * @param {String} message\n * @api private\n */\n\nfunction assert(actual, expected, message) {\n  if (toString.call(expected) === '[object RegExp]' && expected.test(actual)) {\n    return;\n  } else if (eql(actual, expected)) {\n    return;\n  }\n\n  var pad = Array(5).join(' ');\n  var msg = message + '\\n\\n'\n    + pad + 'Actual:   ' + inspect(actual) + '\\n'\n    + pad + 'Expected: ' + inspect(expected) + '\\n';\n\n  return new AssertionError(msg, {\n    actual: actual,\n    expected: expected,\n    showDiff: assert.showDiff\n  });\n}\n\n/**\n * Primary export.\n */\n\nmodule.exports = assert;\n","/home/travis/build/npmtest/node-npmtest-hippie/node_modules/hippie/hydro.conf.js":"/**\n * Local dependencies.\n */\n\nvar server = require('./test/support/server');\nvar hippie = require('./');\n\n/**\n * Hippie factory.\n *\n * Return a new hippie instance with the base URL\n * configured to the local test server.\n *\n * @returns {Hippie}\n * @api public\n */\n\nfunction api() {\n  return hippie().base('http://localhost:' + server.PORT);\n}\n\n/**\n * Test setup.\n *\n * @param {Hydro} hydro\n * @api public\n */\n\nmodule.exports = function(hydro) {\n  hydro.set({\n    suite: 'hippie',\n    formatter: 'hydro-dot',\n    chai: {\n      styles: 'should',\n      stack: true\n    },\n    globals: {\n      api: api\n    },\n    plugins: [\n      'hydro-clean-stacks',\n      'hydro-bdd',\n      'hydro-chai',\n    ],\n    tests: [\n      'test/*.test.js'\n    ]\n  });\n\n  hydro.on('pre:all', function(_, done) {\n    server.listen(server.PORT, done);\n  });\n};\n"}